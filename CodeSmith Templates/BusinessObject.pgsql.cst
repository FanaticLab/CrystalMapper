<%-- 
 
 * Author: Faraz Masood Khan 
 * 
 * Email: faraz@fanaticlab.com
 *
 * Project Url: http://crystalmapper.codeplex.com
 *
 * Copyright: Faraz Masood Khan @ Copyright 2013

--%>
<%@ CodeTemplate Language="C#" Src="HelperFunctions.cs" Inherits="HelperFunctions" TargetLanguage="C#" Debug="False" Description="Generates a Business Object for Custom DAL." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="" Optional="True" Category="1b. Database Options" Description="A prefix that will be stripped from table names when class names are generated." %>
<%@ Property Name="VsVersion" Type="VisualStudioVersion" Default="VS_2008" Optional="False" Category="2. Versions" Description="The version of Visual Studio to generate for." %>
<%@ Property Name="ModelNamespace" Type="System.String" Default="CrystalMapper.Generated.BusinessObjects" Optional="False" Category="2. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="CrystalMapper.Generated.Base" Optional="False" Category="2. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>
<% this.tablePrefix = TablePrefix; %>
/*
 * Author: CrystalMapper Templates
 * 
 * Date:  <%= DateTime.Now.ToString("f") %>
 * 
 * Class: <%= GetClassName(SourceTable) %>
 * 
 * Email: faraz@fanaticlab.com
 * 
 * Project Url: http://crystalmapper.codeplex.com
 *
 * Copyright: Faraz Masood Khan @ Copyright <%= DateTime.Now.ToString("yyyy") %>
 *
/*/

using System;
using System.Data.Common;
using System.Diagnostics;
using System.ComponentModel;
using System.Collections.Generic;

using CoreSystem.Data;

using CrystalMapper;
using CrystalMapper.Context;
using CrystalMapper.Mapping;
using CrystalMapper.Generic;

namespace <%= ModelNamespace %>
{    
	[Table(TABLE_NAME)]
    public partial class <%= GetClassName(SourceTable) %> : Entity< <%= GetClassName(SourceTable) %>>  
    {		
		#region Table Schema
		
        public const string TABLE_NAME = "<%= GetTableName(this.SourceTable) %>";	
     
        <% foreach(ColumnSchema column in SourceTable.Columns) { %>
		public const string <%= GetConstantColumnName(column) %> = "<%= GetColumnName(column) %>";
		<% } %>		
		
		<% foreach(ColumnSchema column in SourceTable.Columns) { %>	
        public const string <%= GetConstantParamName(column) %> = "<%= GetParamName(column) %>";	
	    <% } %>
		
        #endregion
		
		#region Queries
		
		private const string SQL_INSERT_<%= SourceTable.Name.ToUpper() %> = <%= GetInsertQuery(SourceTable, this.TablePrefix) %>;
		
		private const string SQL_UPDATE_<%= SourceTable.Name.ToUpper() %> = <%= GetUpdateQuery(SourceTable, this.TablePrefix) %>;
		
		private const string SQL_DELETE_<%= SourceTable.Name.ToUpper() %> = <%= GetDeleteQuery(SourceTable, this.TablePrefix) %>;
		
        #endregion
        	  	
        #region Declarations
        
		<% // Primitives %>
		<% foreach(ColumnSchema column in SourceTable.Columns) { %>	
		<% if (column.AllowDBNull && column.SystemType.IsValueType) { %>
		protected <%= SystemCSharp[column.SystemType.ToString()] %>? <%= GetPrivateVariableName(column) %> = default(<%= SystemCSharp[column.SystemType.ToString()] %>?);
		<% } else { %>
		protected <%= SystemCSharp[column.SystemType.ToString()] %> <%= GetPrivateVariableName(column) %> = default(<%= SystemCSharp[column.SystemType.ToString()] %>);
		<% } %>
	
		<% } %>
        <% foreach(TableKeySchema keySchema in SourceTable.ForeignKeys) { %>	
		protected <%= GetClassName(keySchema.PrimaryKeyTable) %> <%= GetForeignKeyClassVarName(keySchema) %>;
	
		<% } %>    
        #endregion

 		#region Properties	

		<% foreach(ColumnSchema column in SourceTable.NonForeignKeyColumns) { %>
        <%= GetPropertyDeclaration(column,  SystemCSharp[column.SystemType.ToString()]) %>
        {
            get { return this.<%= GetPrivateVariableName(column) %>; }
			set	{ 
                  if(this.<%= GetPrivateVariableName(column) %> != value)
                    {
                        this.OnPropertyChanging(new PropertyChangingEventArgs("<%= GetPropertyName(column) %>"));  
                        this.<%= GetPrivateVariableName(column) %> = value;                        
                        this.OnPropertyChanged(new PropertyChangedEventArgs("<%= GetPropertyName(column) %>"));
                    }   
                }
        }	
		
        <% } %>
        <% foreach(TableKeySchema keySchema in SourceTable.ForeignKeys) { %>
        <% for (int i = 0 ; i < keySchema.ForeignKeyMemberColumns.Count ; i++ ) { %>
        <%= GetPropertyDeclaration(keySchema.ForeignKeyMemberColumns[i].Column,  SystemCSharp[keySchema.ForeignKeyMemberColumns[i].Column.SystemType.ToString()]) %>               
        {
            get
            {
                if(this.<%= GetForeignKeyClassVarName(keySchema) %> == null)
                    return this.<%= GetPrivateVariableName(keySchema.ForeignKeyMemberColumns[i].Column) %> ;
                
                return this.<%= GetForeignKeyClassVarName(keySchema) %>.<%= GetPropertyName(keySchema.PrimaryKeyMemberColumns[i].Column) %>;            
            }
            set
            {
                if(this.<%= GetPrivateVariableName(keySchema.ForeignKeyMemberColumns[i].Column) %> != value)
                {
                    this.OnPropertyChanging(new PropertyChangingEventArgs("<%= GetPropertyName(keySchema.ForeignKeyMemberColumns[i].Column) %>"));                    
                    this.<%= GetPrivateVariableName(keySchema.ForeignKeyMemberColumns[i].Column) %> = value;                    
                    this.OnPropertyChanged(new PropertyChangedEventArgs("<%= GetPropertyName(keySchema.ForeignKeyMemberColumns[i].Column) %>"));
                    
                    this.<%= GetForeignKeyClassVarName(keySchema)  %> = null;
                }                
            }          
        }	
        
		<% } %>	        
        <% } %>
        <% foreach(TableKeySchema keySchema in SourceTable.ForeignKeys) { %>
        public <%= GetClassName(keySchema.PrimaryKeyTable) %> <%= GetForeignKeyClassPropName(keySchema) %>
        {
            get { 
                    if(this.<%= GetForeignKeyClassVarName(keySchema) %> == null
                    <% for(int j = 0; j < keySchema.ForeignKeyMemberColumns.Count; j++) {
                    MemberColumnSchema mcs = keySchema.ForeignKeyMemberColumns[j]; %>
                    <% if (mcs.Column.AllowDBNull && mcs.Column.SystemType.IsValueType) { %>
                       && this.<%= GetPrivateVariableName(mcs) %>.HasValue <%= j == keySchema.ForeignKeyMemberColumns.Count - 1 ? ")" : "" %>
                    <% } else { %>
                       && this.<%= GetPrivateVariableName(mcs) %> != default(<%= SystemCSharp[mcs.Column.SystemType.ToString()] %>)<%= j == keySchema.ForeignKeyMemberColumns.Count - 1 ? ")" : "" %> 
                    <% } %>
                    <% } %>                     
                    {
                        <%= GetClassName(keySchema.PrimaryKeyTable) %> <%= GetClassVariableName(keySchema.PrimaryKeyTable) %>Query = new <%= GetClassName(keySchema.PrimaryKeyTable) %> {
                        <% for(int i =0; i < keySchema.PrimaryKeyMemberColumns.Count ; i++) { %>
                                                        <%= GetPropertyName(keySchema.PrimaryKeyMemberColumns[i].Column) %> = this.<%= GetPrivateVariableName(keySchema.ForeignKeyMemberColumns[i].Column) %><%= ((keySchema.ForeignKeyMemberColumns[i].Column.AllowDBNull && keySchema.ForeignKeyMemberColumns[i].Column.SystemType.IsValueType) ? ".Value" : "")%>  <%= i != keySchema.PrimaryKeyMemberColumns.Count -1 ? "," : "" %>
                                                        <% } %>    
                                                        };
                        
                        <%= GetClassName(keySchema.PrimaryKeyTable) %>[]  <%= GetCollectionVariableName(keySchema.PrimaryKeyTable) %> = <%= GetClassVariableName(keySchema.PrimaryKeyTable) %>Query.ToList();                        
                        if(<%= GetCollectionVariableName(keySchema.PrimaryKeyTable) %>.Length == 1)
                            this.<%= GetForeignKeyClassVarName(keySchema) %> = <%= GetCollectionVariableName(keySchema.PrimaryKeyTable) %>[0];                        
                    }
                    
                    return this.<%= GetForeignKeyClassVarName(keySchema)  %>; 
                }
			set	{ 
                  if(this.<%= GetForeignKeyClassVarName(keySchema) %> != value)
                    {
                        this.OnPropertyChanging(new PropertyChangingEventArgs("<%= GetForeignKeyClassPropName(keySchema) %>"));
                        if (this.<%= GetForeignKeyClassVarName(keySchema)  %> != null)
                            this.Parents.Remove(this.<%= GetForeignKeyClassVarName(keySchema) %>);                            
                        
                        if((this.<%= GetForeignKeyClassVarName(keySchema)  %> = value) != null) 
                        {
                            this.Parents.Add(this.<%= GetForeignKeyClassVarName(keySchema) %>); 
                            <% for(int i = 0; i < keySchema.PrimaryKeyMemberColumns.Count ; i++) { %>
                            this.<%= GetPrivateVariableName(keySchema.ForeignKeyMemberColumns[i].Column) %> = this.<%= GetForeignKeyClassVarName(keySchema) %>.<%= GetPropertyName(keySchema.PrimaryKeyMemberColumns[i].Column) %>;
                            <% } %>
                        }
                        else
                        {
                            <% for(int i = 0; i < keySchema.PrimaryKeyMemberColumns.Count ; i++) {
                            ColumnSchema column = keySchema.PrimaryKeyMemberColumns[i].Column;
                            if (column.AllowDBNull && column.SystemType.IsValueType) { %>
                            this.<%= GetPrivateVariableName(keySchema.ForeignKeyMemberColumns[i].Column) %> = default(<%= SystemCSharp[column.SystemType.ToString()] %>?);
		                    <% } else { %>
		                    this.<%= GetPrivateVariableName(keySchema.ForeignKeyMemberColumns[i].Column) %> = default(<%= SystemCSharp[column.SystemType.ToString()] %>);
		                    <% } %>
                            <% } %>
                        }
                        this.OnPropertyChanged(new PropertyChangedEventArgs("<%= GetForeignKeyClassPropName(keySchema) %>"));
                    }   
                }
        }	
		
        <% } %>
        #endregion        
        
        #region Methods     		
    
        <% if (SourceTable.HasPrimaryKey) { %>
        public override bool Equals(object obj)
        {
            <%= GetClassName(SourceTable) %> entity = obj as <%= GetClassName(SourceTable) %>;           
            
            return (
                    object.ReferenceEquals(this, entity)                    
                    || (
                        entity != null            
                        <% foreach(MemberColumnSchema mcs in SourceTable.PrimaryKey.MemberColumns) { %>
                        && this.<%= GetPropertyName(mcs.Column) %> == entity.<%= GetPropertyName(mcs.Column) %>
                        <% } %>
                        <% for(int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
                        && this.<%= GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i].Column) %> != default(<%= SystemCSharp[SourceTable.PrimaryKey.MemberColumns[i].SystemType.ToString()] %><%= (SourceTable.PrimaryKey.MemberColumns[i].Column.AllowDBNull && SourceTable.PrimaryKey.MemberColumns[i].Column.SystemType.IsValueType ? "?" : "") %>)
                        <% } %>
                        )
                    );           
        }
        <% } else { %>
        public override bool Equals(object obj)
        {
            <%= GetClassName(SourceTable) %> entity = obj as <%= GetClassName(SourceTable) %>;           
            
            return (
                    object.ReferenceEquals(this, entity)                    
                    || (
                        entity != null            
                        <% foreach(ColumnSchema column in SourceTable.Columns) { %>
                        && this.<%= GetPropertyName(column) %> == entity.<%= GetPropertyName(column) %>
                        <% } %>                       
                        <% for(int i = 0; i < SourceTable.Columns.Count; i++) { %>
                        && this.<%= GetPropertyName(SourceTable.Columns[i]) %> != default(<%= SystemCSharp[SourceTable.Columns[i].SystemType.ToString()] %><%= (SourceTable.Columns[i].AllowDBNull && SourceTable.Columns[i].SystemType.IsValueType ? "?" : "") %>)
                        <% } %>
                        )
                    );           
        }        
        <% } %>   
        
        <% if (SourceTable.HasPrimaryKey) { %>
        public override int GetHashCode()
        {
            
            int hashCode = 7;
            
            <% foreach(MemberColumnSchema mcs in SourceTable.PrimaryKey.MemberColumns) { %>
            <% if(mcs.AllowDBNull) { %>
            hashCode = (11 * hashCode) + (this.<%= GetPrivateVariableName(mcs.Column) %> == null ? 1 : this.<%= GetPropertyName(mcs.Column) %>.GetHashCode());
            <% } else {%>
            hashCode = (11 * hashCode) + this.<%= GetPrivateVariableName(mcs.Column) %>.GetHashCode();
            <% } %>
            <% } %>
                        
            return hashCode;          
        }
        <% } else { %>
        public override int GetHashCode()
        {
            int hashCode = 7;
            
            <% foreach(ColumnSchema column in SourceTable.Columns) { %>
            <% if(column.AllowDBNull) { %>
            hashCode = (11 * hashCode) + (this.<%= GetPrivateVariableName(column) %> == null ? 1 : this.<%= GetPropertyName(column) %>.GetHashCode());
            <% } else {%>
            hashCode = (11 * hashCode) + this.<%= GetPrivateVariableName(column) %>.GetHashCode();
            <% } %>
            <% } %>
                        
            return hashCode;           
        }        
        <% } %>     
        
		public override void Read(DbDataReader reader)
		{       
			<% foreach(ColumnSchema column in SourceTable.Columns) {%>		
			<% if(column.AllowDBNull && column.SystemType.IsValueType) { %>
			this.<%= GetPrivateVariableName(column) %> = DbConvert.ToNullable< <%= SystemCSharp[column.SystemType.ToString()] %> >(reader[<%= GetConstantColumnName(column) %>]);
			<% } else if(column.AllowDBNull && column.SystemType.Name == "String") { %>
			this.<%= GetPrivateVariableName(column) %> = DbConvert.ToString(reader[<%= GetConstantColumnName(column) %>]);
			<% } else { %>
			<% if(column.SystemType.Name == "Object") { %>
			this.<%= GetPrivateVariableName(column) %> = reader[<%= GetConstantColumnName(column) %>];
			<% } else { %>
			this.<%= GetPrivateVariableName(column) %> = (<%= SystemCSharp[column.SystemType.ToString()] %>)reader[<%= GetConstantColumnName(column) %>];
			<% } %>
			<% } %>
			<% } %>
            base.Read(reader);
		}
		
		public override bool Create(DataContext dataContext)
        {
            using(DbCommand command  = dataContext.CreateCommand(SQL_INSERT_<%= SourceTable.Name.ToUpper()%>))
            {	
				<%foreach(ColumnSchema column in SourceTable.Columns) { %>
                <%if(!IsIdentityColumn(column)) {%>
				<%if(column.AllowDBNull){%>
				command.Parameters.Add(dataContext.CreateParameter(DbConvert.DbValue(this.<%= GetPropertyName(column)%>), <%=  GetConstantParamName(column) %>));
				<%}else {%>
				command.Parameters.Add(dataContext.CreateParameter(this.<%= GetPropertyName(column)%>, <%=  GetConstantParamName(column) %>));
				<% } %>
				<% } %>
                <% } %>
                <% if(IsIdentityColumnExists(SourceTable)) { %>
                <%foreach(ColumnSchema column in SourceTable.Columns) { %>
                <%if(IsIdentityColumn(column)) {%>                            
                <% if(this.VsVersion == VisualStudioVersion.VS_2005) { %>	
                this.<%= GetPrivateVariableName(column) %> = Convert.To<%= SystemCSharp[column.SystemType.Name] %>(command.ExecuteScalar());
                <% } else { %>
                this.<%= GetPropertyName(column) %> = Convert.To<%= SystemCSharp[column.SystemType.Name] %>(command.ExecuteScalar());
                return true;                
                <% } %>
                <% } %>
                <% } %>                        
                <% } else { %>
                return (command.ExecuteNonQuery() == 1);
                <% } %>
            }
        }

		public override bool Update(DataContext dataContext)
        {
            using(DbCommand command  = dataContext.CreateCommand(SQL_UPDATE_<%= SourceTable.Name.ToUpper()%>))
            {							
                <%foreach(ColumnSchema column in SourceTable.Columns) { %>			
				<% if(column.AllowDBNull) { %>
				command.Parameters.Add(dataContext.CreateParameter(DbConvert.DbValue(this.<%= GetPropertyName(column)%>), <%=  GetConstantParamName(column) %>));
				<% } else { %>
				command.Parameters.Add(dataContext.CreateParameter(this.<%= GetPropertyName(column)%>, <%=  GetConstantParamName(column) %>));
				<% } %>
				<% } %>		
			
                return (command.ExecuteNonQuery() == 1);
            }
        }

		public override bool Delete(DataContext dataContext)
        {
            using(DbCommand command  = dataContext.CreateCommand(SQL_DELETE_<%= SourceTable.Name.ToUpper()%>))
            {							
                <%if(SourceTable.HasPrimaryKey) {
                    foreach(MemberColumnSchema mcs in SourceTable.PrimaryKey.MemberColumns) { %>				
				command.Parameters.Add(dataContext.CreateParameter(this.<%= GetPropertyName(mcs)%>, <%=  GetConstantParamName(mcs.Column) %>));				
				<%  }
                } else {
                   foreach(ColumnSchema mcs in SourceTable.Columns) { %>				
				command.Parameters.Add(dataContext.CreateParameter(this.<%= GetPropertyName(mcs)%>, <%=  GetConstantParamName(mcs) %>));	
                <% } %>
                <% } %>
                return (command.ExecuteNonQuery() == 1);
            }
        }

        #endregion        
    }
}
