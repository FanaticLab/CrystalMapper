<%-- 
 
 * Author: Faraz Masood Khan 
 * 
 * Date: 6/4/2009 4:33:36 PM
 * 
 * File: BusinessObjectsGenerator.cst
 *
 * Version: 1.0.0.0
 * 
 * Copyright: Faraz Masood Khan @ Copyright ?? 2009
 * 
 * Email: mk.faraz@gmail.com
 * 
 * Blogs: http://csharplive.wordpress.com, http://farazmasoodkhan.wordpress.com

--%>

<%@ CodeTemplate Language="C#" Src="HelperFunctions.cs" Inherits="HelperFunctions" TargetLanguage="C#" OutputType="None" Debug="False" Description="Generates a complete set of Business Objects Mapping for CrystalMapper .csproj file." %>

<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Category="1a. Source Database" Description="The source database to generate from." %>

<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="" Optional="True" Category="1b. Database Options" Description="A prefix that will be stripped from table names when class names are generated." %>

<%@ Property Name="VsVersion" Type="VisualStudioVersion" Default="VS_2008" Optional="False" Category="2. Versions" Description="The version of Visual Studio to generate for." %>

<%@ Property Name="BusinessNamespace" Type="System.String" Default="CrystalMapper.Generated.BusinessObjects" Optional="False" Category="3b. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="CrystalMapper.Generated.Base" Optional="False" Category="3b. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Property Name="ExportPath" Type="System.String" Default="C:\Mapping\" Optional="False" Category="3b. Path" Description="Path where files to be dumped" %>


<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="Microsoft.Build.Utilities" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>

<%@ Register Name="BusinessObjectTemplate" Template="BusinessObjectTemplate.cst" %>


<script runat="template">

public override void Render(TextWriter writer)
{
	this.tablePrefix = this.TablePrefix;
	if(ExcludedTables == null)
		ExcludedTables = new TableSchemaCollection();
	
    foreach(TableSchema table in SourceDatabase.Tables)
		if(!ExcludedTables.Contains(table) && !IsManyToMany(table))
		{	
			RenderBusinessObjects(table);
		}	
}

private void RenderBusinessObjects(TableSchema table)
{
	string fileName = String.Format("{0}{1}.cs", ExportPath, GetClassName(table));
	fileName = System.IO.Path.Combine(ExportPath, fileName);
	BusinessObjectTemplate businessObject = this.Create<BusinessObjectTemplate>();
	businessObject.BusinessNamespace = this.BusinessNamespace;
	businessObject.BaseNamespace = this.BaseNamespace;
	businessObject.VsVersion = this.VsVersion;
	businessObject.SourceTable = table;
	businessObject.TablePrefix = this.TablePrefix;
	businessObject.ExcludedTables = this.ExcludedTables;

	businessObject.RenderToFile(GetOutputFile(fileName, null), true);
}

private OutputFile GetOutputFile(string fileName, string dependentUpon, params object[] metaData)
{
	OutputFile outputFile = new OutputFile(fileName);
	
	if(!String.IsNullOrEmpty(dependentUpon))
		outputFile.DependentUpon = Path.GetFullPath(dependentUpon);
	
	if(metaData.Length % 2 != 0)
		throw new Exception("Invalid Metadata: Provide 2 objects per entry, a String (key) followed by an Object.");
	for(int x=0; x<metaData.Length; x+=2)
    	outputFile.Metadata.Add(metaData[x].ToString(), metaData[x+1]);
		
	return outputFile;
}
private string GetFolder(string folder)
{
	if (folder.Contains(".") && !folder.EndsWith("."))
        folder = folder.Substring(folder.LastIndexOf('.')+1);
		
	if(String.IsNullOrEmpty(folder))
		folder = String.Empty;
	else
	{
		if (!Directory.Exists(folder))
            Directory.CreateDirectory(folder);
			
		if (!folder.EndsWith("\\"))
			folder = String.Format("{0}\\", folder);
	}
	return folder;
}
</script>